"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var INDENT_TYPE_TOP_LEVEL = 'top-level';
var INDENT_TYPE_BLOCK_LEVEL = 'block-level';
/**
 * Manages indentation levels.
 *
 * There are two types of indentation levels:
 *
 * - BLOCK_LEVEL : increased by open-parenthesis
 * - TOP_LEVEL : increased by RESERVED_TOPLEVEL words
 */
var Indentation = /** @class */ (function () {
    function Indentation(indent) {
        var _this = this;
        /**
         * @param {String} indent Indent value, default is "  " (2 spaces)
         */
        this.indent = '';
        this.indentTypes = [];
        /**
         * Resets indentation.
         */
        this.reset = function () {
            _this.indentTypes = [];
        };
        this.count = function () {
            return _this.indentTypes.length;
        };
        /**
         * Returns current indentation string.
         * @return {String}
         */
        this.getIndent = function () {
            return lodash_1.repeat(_this.indent, _this.indentTypes.length);
        };
        /**
         * Increases indentation by one top-level indent.
         */
        this.increaseToplevel = function () {
            _this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);
        };
        /**
         * Increases indentation by one block-level indent.
         */
        this.increaseBlockLevel = function () {
            _this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);
        };
        /**
         * Decreases indentation by one top-level indent.
         * Does nothing when the previous indent is not top-level.
         */
        this.decreaseTopLevel = function () {
            if (lodash_1.last(_this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {
                _this.indentTypes.pop();
            }
        };
        /**
         * Decreases indentation by one block-level indent.
         * If there are top-level indents within the block-level indent,
         * throws away these as well.
         */
        this.decreaseBlockLevel = function () {
            while (_this.indentTypes.length > 0) {
                var type = _this.indentTypes.pop();
                if (type !== INDENT_TYPE_TOP_LEVEL) {
                    break;
                }
            }
        };
        this.indent = ' '.repeat(indent);
    }
    return Indentation;
}());
exports.default = Indentation;
//# sourceMappingURL=indentation.js.map