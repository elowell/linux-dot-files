"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var token_types_1 = require("../constants/token-types");
var INLINE_MAX_LENGTH = 50;
var InlineBlock = /** @class */ (function () {
    function InlineBlock() {
        var _this = this;
        this.level = 0;
        /**
         * Begins inline block when lookahead through upcoming tokens determines
         * that the block would be smaller than INLINE_MAX_LENGTH.
         * @param  {Object[]} tokens Array of all tokens
         * @param  {Number} index Current token position
         */
        this.beginIfPossible = function (node) {
            if (_this.level === 0 && _this.isInlineBlock(node)) {
                _this.level = 1;
            }
            else if (_this.level > 0) {
                _this.level++;
            }
            else {
                _this.level = 0;
            }
        };
        /**
         * Finishes current inline block.
         * There might be several nested ones.
         */
        this.end = function () {
            _this.level--;
        };
        /**
         * True when inside an inline block
         * @return {Boolean}
         */
        this.isActive = function () {
            return _this.level > 0;
        };
        // Check if this should be an inline parentheses block
        // Examples are "NOW()", "COUNT(*)", "int(10)", key(`somecolumn`), DECIMAL(7,2), {% ... %}, {{...}}
        this.isInlineBlock = function (node) {
            var level = 0;
            var length = 0;
            var currentNode = node;
            while (currentNode.next) {
                var token = currentNode.next.item;
                length += token.value.length;
                if (length > INLINE_MAX_LENGTH) {
                    return false;
                }
                if ([token_types_1.default.OPEN_PAREN, token_types_1.default.DBT_START_TEMPLATE].includes(token.type)) {
                    level++;
                }
                else if ([token_types_1.default.CLOSE_PAREN, token_types_1.default.DBT_END_TEMPLATE].includes(token.type)) {
                    level--;
                    if (level === 0) {
                        return true;
                    }
                }
                if (InlineBlock.isForbiddenToken(token)) {
                    return false;
                }
                currentNode = currentNode.next;
            }
            return false;
        };
    }
    // Reserved words that cause newlines, comments and semicolons
    // are not allowed inside inline parentheses block
    InlineBlock.isForbiddenToken = function (_a) {
        var type = _a.type, value = _a.value;
        return (type === token_types_1.default.RESERVED_TOPLEVEL ||
            type === token_types_1.default.RESERVED_NEWLINE ||
            type === token_types_1.default.BLOCK_COMMENT ||
            value === ';');
    };
    return InlineBlock;
}());
exports.default = InlineBlock;
//# sourceMappingURL=inline-block.js.map