"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var LinkedList = /** @class */ (function () {
    function LinkedList() {
        var _this = this;
        this.EMPTY_NODE = { item: {}, next: undefined };
        this.head = this.EMPTY_NODE;
        this.tail = this.EMPTY_NODE;
        this.getHead = function () { return _this.head; };
        this.getTail = function () { return _this.tail; };
        this.insert = function (value) {
            var node = _this.forgeNode(value);
            node.next = _this.head;
            if (_this.head) {
                _this.head.previous = node;
            }
            _this.head = node;
            if (!_this.tail) {
                _this.tail = node;
            }
            return _this;
        };
        this.append = function (value) {
            var node = _this.forgeNode(value);
            if (_this.isEmpty()) {
                _this.head = node;
                _this.tail = node;
                return _this;
            }
            _this.appendToTheEndOfTheList(node);
            return _this;
        };
        this.fromArray = function (values) {
            values.forEach(function (v) { return _this.append(v); });
            return _this;
        };
        this.toArray = function () {
            var result = [];
            _this.iterate(function (_) { return result.push(_); });
            return result;
        };
        this.size = function () {
            var listSize = 0;
            _this.iterate(function (_) { return listSize++; });
            return listSize;
        };
        this.isEmpty = function () { return !_this.head || _this.head === _this.EMPTY_NODE; };
        this.iterate = function (accept) {
            var node = _this.head;
            while (node.next) {
                accept(node.item);
                node = node.next;
            }
        };
        this.forgeNode = function (value) {
            return { item: value, next: undefined };
        };
        this.appendToTheEndOfTheList = function (node) {
            node.previous = _this.tail;
            _this.tail.next = node;
            _this.tail = node;
        };
    }
    LinkedList.prototype.items = function () {
        var node;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    node = this.head;
                    _a.label = 1;
                case 1:
                    if (!node.next) return [3 /*break*/, 3];
                    return [4 /*yield*/, node];
                case 2:
                    _a.sent();
                    node = node.next;
                    return [3 /*break*/, 1];
                case 3: return [4 /*yield*/, this.tail];
                case 4:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    };
    return LinkedList;
}());
exports.LinkedList = LinkedList;
//# sourceMappingURL=data-structures.js.map